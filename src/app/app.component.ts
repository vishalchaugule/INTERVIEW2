import { Component } from '@angular/core'
import { RouterOutlet } from '@angular/router'
import { Observable } from 'rxjs'

@Component({
  selector: 'app-root',
  standalone: true,
  imports: [RouterOutlet],
  templateUrl: './app.component.html',
  styleUrl: './app.component.css',
})
export class AppComponent {
  title = 'RXJS'
  obs: any

    Observable() {
      this.obs = new Observable((observer) => {
        observer.next('Hello')
        observer.next('Hello')
        observer.error('error')
        observer.complete()
      })

      this.obs.subscribe({
        next: (val:any) => console.log(val),
        error: (err:any) => console.log('Error:', err),
        complete: () => console.log('Done')
      });

      //   ЁЯФ╣ Observable
      // ЁЯСЙ Data рдЪрдВ stream рдЖрд╣реЗ тАУ рдЬреЗ рд╡реЗрд│реЛрд╡реЗрд│реА values emit рдХрд░рддрдВ.
      // ЁЯСЙ рдЖрдкрдг subscribe() рдХреЗрд▓реНрдпрд╛рд╡рд░ data рдорд┐рд│рддреЛ.
      // ЁЯСЙ рддреАрди рдкреНрд░рдХрд╛рд░рдЪреЗ notification рджреЗрддреЛ: next, error, complete.

      // "An Observable is a core concept in RxJS which represents a stream of data that can be observed over time. It can emit multiple values, errors, or a completion signal. We subscribe to an Observable to start receiving data. It's very useful for handling asynchronous operations like API calls, user interactions, or timers."

  //     Observable рдореНрд╣рдгрдЬреЗ рдПрдХ data stream рдЖрд╣реЗ тАФ рдореНрд╣рдгрдЬреЗрдЪ data рд╣рд│реВрд╣рд│реВ рд╡реЗрд│реЛрд╡реЗрд│реА рдпреЗрддреЛ.
  // рдЖрдкрдг subscribe рдХреЗрд▓реНрдпрд╛рд╡рд░ рддреЛ рдЖрдкрд▓реНрдпрд╛рд▓рд╛ data рдкрд╛рдард╡рддреЛ (next()), error рдЖрд▓реНрдпрд╛рд╕ error(), рдЖрдгрд┐ process рдкреВрд░реНрдг рдЭрд╛рд▓реНрдпрд╛рд╡рд░ complete() рдкрд╛рдард╡рддреЛ.
  // рд╣реЗ asynchronous operations рд╕рд╛рдареА рдЦреВрдк рдЙрдкрдпреБрдХреНрдд рдЖрд╣реЗ тАФ рдЬрд╕рдВ рдХреА API call, input events, time intervals, рдЗ.

  // Observable рдореНрд╣рдгрдЬреЗ рдПрдХ рдЕрд╢реА рдЧреЛрд╖реНрдЯ рдЬреА рд╡реЗрд│реЛрд╡реЗрд│реА рдбреЗрдЯрд╛ "push" рдХрд░рдд рд░рд╛рд╣рддреЗ. рдореНрд╣рдгрдЬреЗрдЪ, рддреЛ рдбреЗрдЯрд╛ рдирд┐рд░реНрдорд╛рдг рдХрд░рддреЛ рдЖрдгрд┐ рддреБрдордЪреНрдпрд╛рдХрдбреЗ рдкрд╛рдард╡рддреЛ тАФ рдХрдзреА рдПрдХрдЪ рд╡реЗрд│реЗрд▓рд╛, рдХрдзреА рдЕрдиреЗрдХ рд╡реЗрд│рд╛.

  // Pull: рддреБ рдЙрдкрд╛рд╢реА рдЖрд╣реЗрд╕ рдЖрдгрд┐ рд╕реНрд╡рдпрдВрдкрд╛рдХрдШрд░рд╛рдд рдЬрд╛рдКрди рдХрд╛рд╣реАрддрд░реА рдЦрд╛рдгреНрдпрд╛рд╕рд╛рдареА рд╕реНрд╡рддрдГрдЪ рд╢реЛрдзрддреЛрд╕. (рддреБрд▓рд╛ рдЬреЗрд╡реНрд╣рд╛ рдкрд╛рд╣рд┐рдЬреЗ рддреЗрд╡реНрд╣рд╛ рддреВ рдШреЗрддреЛрд╕)

  // Push: рдЖрдИ рд╕реНрд╡рддрдГрд╣реВрди рдкреНрд▓реЗрдЯрдордзреНрдпреЗ рд╡рд╛рдвреВрди рджреЗрддреЗ тАФ рддреБрд▓рд╛ рдХрд╛рд╣реАрд╣реА рд╡рд┐рдЪрд╛рд░рд╛рдпрдЪреА рдЧрд░рдЬ рдирд╛рд╣реА. (рддреА рдХрдзреА рд╡рд╛рдвреЗрд▓ рддреЗ рддрд┐рдЪреНрдпрд╛ рд╣рд╛рддрд╛рдд рдЖрд╣реЗ)

  // Observable = рдЕрдиреЗрдХ рдореВрд▓реНрдпреЗ рд╡реЗрд│реЗрдиреБрд╕рд╛рд░ Push рдХрд░рдгрд╛рд░рд╛ producer.

  // subscribe() = рдЪрд╛рд▓реВ рдХрд░рддреЛ.

  // unsubscribe() = рдмрдВрдж рдХрд░рддреЛ.

  // next(), error(), complete() тАФ рд╣реЗрдЪ рей рдореБрдЦреНрдп рдЗрд╡реНрд╣реЗрдВрдЯреНрд╕ рдЖрд╣реЗрдд.

  // Lazy рдЕрд╕рддреЛ тАФ рдореНрд╣рдгрдЬреЗ Subscribing рдХреЗрд▓реНрдпрд╛рд╡рд░рдЪ рдЪрд╛рд▓рддреЛ.

    }

  OBSERVER() {
    //     Observer рдореНрд╣рдгрдЬреЗ рдПрдХ рдЕрд╕рдВ object рдХрд┐рдВрд╡рд╛ function set рдЕрд╕рддрдВ, рдЬреЗ Observable рдХрдбреВрди рдпреЗрдгрд╛рд▒реНрдпрд╛ values (рдбреЗрдЯрд╛) рд▓рд╛ receive рдХрд░рддрдВ.
    // рддреЗ 3 рдкреНрд░рдХрд╛рд░рдЪреЗ рд╕рдВрджреЗрд╢ receive рдХрд░реВ рд╢рдХрддрдВ:

    // тЬЕ next: рдирд╡реАрди value рдЖрд▓реА рдХреА next() рдХреЙрд▓ рд╣реЛрддреЛ

    // тЭМ error: рдХрд╛рд╣реА рдЪреВрдХ рдЭрд╛рд▓реА рддрд░ error() рдХреЙрд▓ рд╣реЛрддреЛ

    // тЬЕтЬЕ complete: рд╕рд░реНрд╡ values рджреЗрдКрди Observable рдкреВрд░реНрдг рдЭрд╛рд▓рд╛ рдХреА complete() рдХреЙрд▓ рд╣реЛрддреЛ

    // ЁЯОп рдЙрджрд╛рд╣рд░рдг:
    // const observer = {
    //   next: x => console.log('Observer рд▓рд╛ рдирд╡реАрди value рдорд┐рд│рд╛рд▓реА: ' + x),
    //   error: err => console.error('Observer рд▓рд╛ error рдорд┐рд│рд╛рд▓рд╛: ' + err),
    //   complete: () => console.log('Observable рдкреВрд░реНрдг рдЭрд╛рд▓рд╛.'),
    // };
    // рдЖрдгрд┐ рд╣реЗ observer рдЖрдкрдг Observable.subscribe() рдордзреНрдпреЗ рд╡рд╛рдкрд░рддреЛ:
    // observable.subscribe(observer);
    // ЁЯФ╣ рдкреВрд░реНрдг Observer vs Partial Observer
    // ЁЯФ╕ Full Observer:
    // рдЬрд░ рддреВ next, error, рдЖрдгрд┐ complete тАУ рд╕рдЧрд│реА callback functions рджрд┐рд▓реАрд╕, рддрд░ рддреЗ full observer рдЕрд╕рддрдВ.
    // ЁЯФ╕ Partial Observer:
    // рдЬрд░ рддреВ рдлрдХреНрдд рдХрд╛рд╣реА callbacks рджрд┐рд▓реНрдпрд╛ (рдЙрджрд╛рд╣рд░рдгрд╛рд░реНрде next рдЖрдгрд┐ error), рддрд░реА рдЪрд╛рд▓рддрдВ. рдЙрд░рд▓реЗрд▓реНрдпрд╛ notifications рдирд╛ RxJS simply ignore рдХрд░рддрдВ.
    // const partialObserver = {
    //   next: x => console.log('рдлрдХреНрдд next callback: ' + x),
    //   // complete callback рдирд╛рд╣реА рджрд┐рд▓реА рддрд░реА observable рдЪрд╛рд▓реЗрд▓
    // };
    // тЬЕ Short Syntax:
    // рдЬрд░ рддреБрд▓рд╛ рдлрдХреНрдд next value рд╡рд╛рдкрд░рд╛рдпрдЪреА рдЕрд╕реЗрд▓, рддрд░ рддреВ рдЕрд╕рдВрд╣реА рдХрд░реВ рд╢рдХрддреЛ:
    // observable.subscribe(x => console.log('рдорд┐рд│рд╛рд▓реЗрд▓реА value: ' + x));
    // тЮбя╕П рдпрд╛рдд internally RxJS рдПрдХ Observer рддрдпрд╛рд░ рдХрд░рддреЛ рдЬрд┐рдереЗ next рд▓рд╛ рддреВ рджрд┐рд▓реЗрд▓рд╛ callback рдЕрд╕рддреЛ, рдЖрдгрд┐ рдЙрд░рд▓реЗрд▓реЗ (error, complete) default рдЕрд╕рддрд╛рдд.
    // ЁЯФБ рдереЛрдбрдХреНрдпрд╛рдд рд╕рд╛рд░рд╛рдВрд╢:
    // Term	рдЕрд░реНрде
    // Observable	рдбреЗрдЯрд╛ рддрдпрд╛рд░ рдХрд░рдгрд╛рд░рд╛ (producer)
    // Observer	рдбреЗрдЯрд╛ consume рдХрд░рдгрд╛рд░рд╛ (listener)
    // next()	рдирд╡реАрди value рдЖрд▓реА
    // error()	рдХрд╛рд╣реА рдЪреВрдХ рдЭрд╛рд▓реА
    // complete()	рд╕рд░реНрд╡ values рджрд┐рд▓реНрдпрд╛ рдЖрдгрд┐ observable рд╕рдВрдкрд▓рдВ


// -------------------------------ЁЯСЙ subscribe() рдХрд░рддрд╛рдирд╛рдЪ Observer рд╡рд╛рдкрд░рддреЛ.----------------------------------------

//     <!DOCTYPE html>
// <html>
//   <head>
//     <title>RxJS Example</title>
//     <script src="https://unpkg.com/rxjs@7/dist/bundles/rxjs.umd.min.js"></script>
//   </head>
//   <body>
//     <h2>RxJS Observer Example</h2>
//     <script>
//       const { Observable } = rxjs;

//       // тЬЕ 1. Observable рддрдпрд╛рд░ рдХрд░рддреЛ
//       const myObservable = new Observable((subscriber) => {
//         subscriber.next('Hello');
//         subscriber.next('from');
//         subscriber.next('RxJS!');
//         subscriber.complete();
//       });

//       // тЬЕ 2. Observer рддрдпрд╛рд░ рдХрд░рддреЛ
//       const myObserver = {
//         next: (value) => console.log('тЬЕ Value:', value),
//         error: (err) => console.error('тЭМ Error:', err),
//         complete: () => console.log('ЁЯОЙ Completed'),
//       };

//       // тЬЕ 3. Observable рд▓рд╛ subscribe рдХрд░рддреЛ
//       myObservable.subscribe(myObserver);
//     </script>
//   </body>
// </html>

  }


  OPERATOR(){
//     ЁЯТб RxJS Operators рдореНрд╣рдгрдЬреЗ рдХрд╛рдп?
// Operators рдореНрд╣рдгрдЬреЗ functions (рдХрд╛рд░реНрдпреЗ) рдЬреЗ Observable рд╡рд░ рдкреНрд░рдХреНрд░рд┐рдпрд╛ рдХрд░рддрд╛рдд. рд╣реЗ рджреЛрди рдкреНрд░рдХрд╛рд░рдЪреЗ рдЕрд╕рддрд╛рдд:

// тЬЕ 1. Pipeable Operators (рдкрд╛рдЗрдкрдиреЗ рд╡рд╛рдкрд░рд▓реЗ рдЬрд╛рдгрд╛рд░реЗ рдСрдкрд░реЗрдЯрд░реНрд╕)
// рд╣реЗ .pipe() рдореЗрдердб рд╡рд╛рдкрд░реВрди рд╡рд╛рдкрд░рд▓реЗ рдЬрд╛рддрд╛рдд.

// рдпрд╛рдЪрд╛ рдореВрд│ Observable рдмрджрд▓рдд рдирд╛рд╣реА, рдкрдг рдирд╡реАрди Observable рддрдпрд╛рд░ рд╣реЛрддреЛ.

// рд╣реЗ pure functions рдЕрд╕рддрд╛рдд.

// рдЙрджрд╛рд╣рд░рдг:


// import { of, map } from 'rxjs';

// of(1, 2, 3)
//   .pipe(map(x => x * 2))
//   .subscribe(x => console.log('Value:', x));
// ЁЯУМ Output:



// Value: 2
// Value: 4
// Value: 6
// тЬЕ 2. Creation Operators (рдирд╡реАрди Observable рддрдпрд╛рд░ рдХрд░рдгрд╛рд░реЗ рдСрдкрд░реЗрдЯрд░реНрд╕)
// рд╣реЗ рдирд╡реАрди Observables рддрдпрд╛рд░ рдХрд░рддрд╛рдд.

// рдЙрджрд╛рд╣рд░рдг:


// import { interval } from 'rxjs';

// const obs = interval(1000); // рдкреНрд░рддреНрдпреЗрдХ 1000ms рд▓рд╛ рдПрдХ рдирдВрдмрд░ emit рд╣реЛрдИрд▓
// obs.subscribe(x => console.log(x));
// ЁЯФД Higher-order Observables рдореНрд╣рдгрдЬреЗ рдХрд╛рдп?
// рдЬрд░ рдПрдХ Observable рджреБрд╕рд░рдВ Observable emit рдХрд░рдд рдЕрд╕реЗрд▓, рддрд░ рддреНрдпрд╛рд▓рд╛ Higher-order Observable рдореНрд╣рдгрддрд╛рдд.

// ЁЯза Example:


// urlObservable.pipe(
//   map(url => http.get(url)), // http.get рдПрдХ Observable рдкрд░рдд рдХрд░рддрдВ
//   concatAll() // рд╕рдЧрд│реА inner observables flatten рдХрд░рддреЛ
// )
// ЁЯФА Flattening Operators (рдЬрд╕реЗ рдХреА join operators):
// concatAll()

// mergeAll()

// switchAll()

// exhaustAll()

// ЁЯФз Custom Operator рдмрдирд╡рдгреНрдпрд╛рдЪреЗ рдЙрджрд╛рд╣рд░рдг:

// import { pipe, filter, map } from 'rxjs';

// function discardOddDoubleEven() {
//   return pipe(
//     filter(v => v % 2 === 0),
//     map(v => v * 2)
//   );
// }
// ЁЯФв Operator Categories (рд╢реНрд░реЗрдгреА):

// рд╢реНрд░реЗрдгреА	рдЙрджрд╛рд╣рд░рдг
// Creation--	of, interval, from
// Transformation	--map, mergeMap, concatMap
// Filtering	filter,---- take, first
// Joining	merge, concat, zip
// Multicasting--	share, publish
// Error handling--	catchError, retry
// Utility--	tap, delay, timeout
  }


  SUBSCRIBE(){
//     ЁЯУМ Subscription рдореНрд╣рдгрдЬреЗ рдХрд╛рдп?
// RxJS рдордзреНрдпреЗ Subscription рдореНрд╣рдгрдЬреЗ рдПрдХ object рдЖрд╣реЗ рдЬреЛ рдПрдХрд╛ Observable рдЪреНрдпрд╛ execution рдЪрдВ рдкреНрд░рддрд┐рдирд┐рдзрд┐рддреНрд╡ рдХрд░рддреЛ.

// рдЬреЗрд╡реНрд╣рд╛ рдЖрдкрдг рдПрдЦрд╛рджреНрдпрд╛ Observable рд▓рд╛ .subscribe() рдХрд░рддреЛ, рддреЗрд╡реНрд╣рд╛ рддреЛ рдХрд╛рд╣реАрддрд░реА data emit рдХрд░рдгрдВ рд╕реБрд░реВ рдХрд░рддреЛ тАФ рдЖрдгрд┐ рддреЗ execution рдЪрд╛рд▓реВ рд░рд╛рд╣рддрдВ, рдЬреЛрдкрд░реНрдпрдВрдд рдЖрдкрдг рддреЗ рдерд╛рдВрдмрд╡рдд рдирд╛рд╣реА.

// рд╣реА execution рдерд╛рдВрдмрд╡рдгреНрдпрд╛рд╕рд╛рдареА рдЖрдкрдг unsubscribe() рд╣реА method рд╡рд╛рдкрд░рддреЛ.

// ЁЯФз Subscription рдЪреЗ рдореБрдЦреНрдп рд╡реИрд╢рд┐рд╖реНрдЯреНрдп:
// unsubscribe() тЖТ рд╣реА method рдХреЙрд▓ рдХреЗрд▓реА рдХреА, рддреЛ Observable рдкреБрдвреЗ рдХрд╛рд╣реА emit рдХрд░рдгрд╛рд░ рдирд╛рд╣реА, рдореНрд╣рдгрдЬреЗрдЪ resource рдореБрдХреНрдд рд╣реЛрддреЛ.

// RxJS рдЪреНрдпрд╛ рдЬреБрдиреНрдпрд╛ versions рдордзреНрдпреЗ Subscription рд▓рд╛ "Disposable" рдореНрд╣рдгрд╛рдпрдЪреЗ.

// ЁЯзк рдЙрджрд╛рд╣рд░рдг:
// ts

// import { interval } from 'rxjs';

// const observable = interval(1000); // рдкреНрд░рддреНрдпреЗрдХ 1 рд╕реЗрдХрдВрджрд╛рд▓рд╛ value emit рд╣реЛрдИрд▓

// const subscription = observable.subscribe(x => console.log(x));

// // рдХрд╛рд╣реА рд╡реЗрд│рд╛рдирдВрддрд░ рдЖрдкрд▓реНрдпрд╛рд▓рд╛ рд╣реЗ рдерд╛рдВрдмрд╡рд╛рдпрдЪрдВ рдЕрд╕реЗрд▓...
// setTimeout(() => {
//   subscription.unsubscribe(); // execution cancel рдХреЗрд▓реА
// }, 5000);
// ЁЯУЭ рд╡рд░реАрд▓ рдЙрджрд╛рд╣рд░рдгрд╛рдд interval рдкреНрд░рддреНрдпреЗрдХ рд╕реЗрдХрдВрджрд╛рд▓рд╛ рдПрдХ рдирд╡реАрди value emit рдХрд░рддрдВ, рдкрдг рдЖрдкрдг 5 рд╕реЗрдХрдВрджрд╛рдВрдирдВрддрд░ unsubscribe() рдХреЗрд▓реНрдпрд╛рдореБрд│реЗ рддреЛ рдерд╛рдВрдмрддреЛ.

// ЁЯФЧ Multiple Subscriptions рдПрдХрддреНрд░ рдХрд░рдгреЗ:
// рдЖрдкрдг рдПрдХ Subscription рдордзреНрдпреЗ рджреБрд╕рд░рдВ Subscription "add" рдХрд░реВ рд╢рдХрддреЛ. рддреНрдпрд╛рдореБрд│реЗ рдПрдХрд╛рдЪ рд╡реЗрд│реА рдЕрдиреЗрдХ Observables рдЪрдВ execution рдерд╛рдВрдмрд╡рддрд╛ рдпреЗрддрдВ.

// рдЙрджрд╛рд╣рд░рдг:
// ts

// import { interval } from 'rxjs';

// const observable1 = interval(400); // рдкреНрд░рддреНрдпреЗрдХ 400ms рд▓рд╛ emit
// const observable2 = interval(300); // рдкреНрд░рддреНрдпреЗрдХ 300ms рд▓рд╛ emit

// const subscription = observable1.subscribe(x => console.log('first: ' + x));
// const childSubscription = observable2.subscribe(x => console.log('second: ' + x));

// subscription.add(childSubscription); // рджреБрд╕рд░рдВ Subscription рдкрд╣рд┐рд▓реНрдпрд╛рдд add рдХреЗрд▓рдВ

// setTimeout(() => {
//   subscription.unsubscribe(); // рджреЛрдиреНрд╣реА subscriptions cancel рд╣реЛрддреАрд▓
// }, 1000);
// ЁЯУд рдХрдиреНрд╕реЛрд▓ output:
// makefile

// second: 0
// first: 0
// second: 1
// first: 1
// second: 2
// 1 рд╕реЗрдХрдВрдж рдЭрд╛рд▓реНрдпрд╛рд╡рд░ unsubscribe() рдХреЗрд▓реНрдпрд╛рдиреЗ рджреЛрдиреНрд╣реА Observable рдерд╛рдВрдмрддреАрд▓.

// ЁЯФД Subscription рдХрд╛рдвреВрди рдЯрд╛рдХрдгреЗ (remove):
// рдЬрд░ рддреБрдореНрд╣реА рджреБрд╕рд░рдВ Subscription рдЪреБрдХреВрди add рдХреЗрд▓рдВ рдЕрд╕реЗрд▓ рдХрд┐рдВрд╡рд╛ рддреБрдореНрд╣рд╛рд▓рд╛ рддреЗ рд╡реЗрдЧрд│рдВ рдареЗрд╡рд╛рдпрдЪрдВ рдЕрд╕реЗрд▓, рддрд░ рддреБрдореНрд╣реА рддреЗ remove() рд╡рд╛рдкрд░реВрди рдореБрдЦреНрдп Subscription рдордзреВрди рдХрд╛рдвреВ рд╢рдХрддрд╛.

// ts

// subscription.remove(childSubscription);
// ЁЯУМ рдереЛрдбрдХреНрдпрд╛рдд рд╕рд╛рдВрдЧрд╛рдпрдЪрдВ рдЭрд╛рд▓рдВ рддрд░:

// рд╕рдВрдЬреНрдЮрд╛	рдЕрд░реНрде
// Subscription	Observable рд╕реБрд░реВ рдЭрд╛рд▓реНрдпрд╛рд╡рд░ рддрдпрд╛рд░ рд╣реЛрдгрд╛рд░рд╛ resource
// unsubscribe()	Observable рдмрдВрдж рдХрд░рддреЛ, resource release рдХрд░рддреЛ
// add()	рджреБрд╕рд░рдВ subscription add рдХрд░рддреЛ
// remove()	рджреБрд╕рд░рдВ subscription remove рдХрд░рддреЛ
// RxJS рдордзреНрдпреЗ рдХрд╛рдо рдХрд░рддрд╛рдирд╛ Subscription рдЖрдгрд┐ unsubscribe() рдпреЛрдЧреНрдп рд╡реЗрд│реА рд╡рд╛рдкрд░рдгрдВ рдЕрддреНрдпрдВрдд рдорд╣рддреНрддреНрд╡рд╛рдЪрдВ рдЖрд╣реЗ, рд╡рд┐рд╢реЗрд╖рддрдГ memory leak рдЯрд╛рд│рдгреНрдпрд╛рд╕рд╛рдареА!
  }
}


